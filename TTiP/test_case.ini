[SOLVER]
# The solver section defines which solver to use and where to store the
# results.

# file_path (string): The path to store the result in.
# method (string): The method to use. Avalilable options are
#     ForwardEuler, BackwardEuler, CrankNicolson, and Theta.
# theta (float): **Theta only** The theta parameter for a theta model solve.
file_path: ./ttip_results/result.pvd
method: BackwardEuler
#theta: 0.5

[MESH]
# The mesh is defined by a type and parameters.
# Mesh types include all UtilityMeshes in firedrake as well as the option to
# read from a file.

# type (string): Which Mesh builder to use.
# params (comma seperated list): The params for the given mesh builder.
type: Box
params: 20, 20, 20, 4e-5, 4e-5, 4e-5


[PARAMETERS]
# Any parameters are defined by name.
# For example the below defines the density parameter.
# A parameter will only be used if one of the mixins requests it.
# Parameters follow the same pattern as other functions which can be read about
# below.
density.type: constant
density.value: 1.1e27

[SOURCES]
# Any sources that are defined here will be summed to produce a final source
# term.
# Sources follow the same pattern as other functions which can be read about
# below.
zero.type: constant
zero.value: 0

[BOUNDARIES]
# Boundary conditions can be defined for each boundary surface in the mesh.
# Problems can have no boundary conditions by leaving this section empty,
# otherwise each surface must have 1 boundary condition, to define a condition
# on all surfaces use 'all'.

# <name>.boundary_type (string): The type of boundary condition
#                                (dirichlet, neuman, robin)
# <name>.surface (comma separated list or 'all'): The surface the condition
#                                                 applies for.
# If using dirichlet, you should also define g (the value on the boundary).
# If using neuman, you should also define value.
# If using robin, you should also define alpha and value.
fixed.boundary_type: dirichlet
fixed.g: 100
fixed.surface: 1, 2, 3, 4, 5, 6

[TIME]
# Time is used to define any time dependency in the problem.
# If this section is left blank, the problem is assumed to be steady state.
# Only 2 (any 2) of the settings in this section are needed, and the third can
# be calculated.

# steps (int): The number of steps to take.
# dt (float): The length of each time step.
# max_t (float): The maximum time to step until.
steps: 100
dt: 1e-13
#max_t: 1e-12

[INITIALVALUE]
# Initial values follow the same pattern as sources.
gaus.type: Gaussian
gaus.scale: 1000
gaus.mean: 2e-5
gaus.sd: 1e-5

fixed.type: constant
fixed.value: 100

# Functions:
# To define a function in TTiP, we use the following format
# <name>.type: <type>
# <name>.<param1>: <value1>
# ...
#
# For details on available functions and their parameters, please see the main
# documentation for TTiP.
